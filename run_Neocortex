#!/bin/bash
#
# 2014-04-16
#
# I believe that the stock code runs for about 29 hours.
# 
# The random seed is configured in two files: Neocortex.g and orient_sim.g
#
# Data output is configured in the .g files within the Genesis_scripts
# directory. You can change them en masse using sed, or just rm the existing
# data symlink and make it point somewhere else, e.g. by calling:
#
# rm data
# mkdir data-randseed34523
# ln -s data-randseed34523 data
#
# I'm not sure what the above procedure will do if there is already a running
# instance of pgenesis. It may fail, or even worse, it may continue to write
# into the new location.
#
# 2014-04-21
#
# Just noticed that there is a script called Genesis_scripts/pgenesis_command
# that would have done the same thing as this script (not sure whether it
# actually would, due to differing MPI implementations). From the logfiles in
# that directory, it appears that they were previously running on multiple
# computers, like I was looking into.
#
# 2014-05-12
#
# Modified the hardcoded absolute paths so that data are written into a
# relative data directory. This script checks to see if the data directory is
# there (and maybe should move the existing data if that directory isn't
# empty).
#
# Seems like there is some stuff in the .g that expects to find things in the
# local directory, preventing me from running this script anywhere other than
# "./". This means that mydir is always going to be "./".
#
# 2015-01-13
# 
# The Neocortex scripts are currently undergoing some major revisions.
#
# 2015-03-24
#
# Current baseline model can be run on 256 nodes. The model setup takes about 2
# hours, demonstrating the massive communications overhead when setting up
# connections across so many computers. I only count 1.3 million connections
# this way, which is quite different from the 5.5 million I counted on 16
# nodes. Need to double check.
#
# Comparison: 7 minutes to set up on 64 nodes (8 machines, 8 cores each).

date

myrundate="`date "+%Y%m%d-%H%M%S"`"

# Check binary paths
if [[ ! "`which mpirun 2> /dev/null && which pgenesis`" ]]; then
	echo "mpirun and/or pgenesis not found. Trying to set the right path for you."
	export PATH="$PATH:/data2/software/gentoo/usr/bin:/data2/software/genesis-2.4/genesis:/data2/software/genesis-2.4/pgenesis/bin"
fi

myhosts="`hostname -s`"
if [[ "`echo "$1" | grep "^[a-z]"`" ]]; then
	myhosts="`echo $1 | sed 's/localhost/$(hostname -s)/g' | tr ' ' ','`"
fi
echo "Running on: $myhosts"

# Checking output paths
#mydir="`dirname "$0"`"
mydir="`pwd | sed 's/\/home/\/barleyhome/'`"
if [[ "`grep "membranepotentialoutput\s*=\s*1" Neocortex.g`" ]]; then # high I/O needs; use /dev/shm on each host for data
    remotedata=1
    mydirwithtime="/dev/shm/data-$myrundate"

    # Create output directories in /dev/shm on all hosts
    parallel ssh -x {} mkdir "$mydirwithtime" ::: `echo $myhosts | tr ',' ' '`
else # low I/O needs
    mydirwithtime="$mydir/data-$myrundate"
    mkdir "$mydirwithtime"
fi
commondir="$mydir/data-$myrundate"

# Update symlinks for latest output directory
rm "$mydir/data-nextlatest"
cp -P "$mydir/data-latest" "$mydir/data-nextlatest" 
rm "$mydir/data-latest"
ln -s "$mydirwithtime" "$mydir/data-latest"
echo "Running in $mydir; writing data to $mydirwithtime"
if [[ "`find $mydirwithtime -type f 2>/dev/null`" ]]; then
    echo "Data directory already exists. Wait one second and run this script again."
    exit
fi

mkdir -p "$mydirwithtime/connections" # need to fix this for multi-host high I/O mode
mkdir -p "$mydir/data/connections"
mkdir -p "$commondir"

# Output log file
logfile="$commondir/${myrundate}.log"

# Echo any notes passed in on the command line to the log file
echo "Running as $(whoami) at $myrundate on $myhosts" | tee -a "$logfile"
echo "Notes: $@" | tee -a "$logfile"

# Checking node numbers
# Assumes that Nnodes in Neocortex.g is correct
export num_nodes="`grep "\sNnodes = " $mydir/Neocortex.g | sed 's/.* = //'`"
echo "Running on $num_nodes nodes"

# Create snapshot of all Genesis scripts and parameters
# Use static list of important files and copy to data-latest:
if [[ "x`git status 2>/dev/null`" != "x" ]]; then
    git ls-files | grep -v ".gitattributes" > gitfiles.txt
fi
mkdir "$mydir/data-latest/scripts"
tar c -T - < gitfiles.txt | tar x -C "${mydirwithtime}/scripts"

# http://www.genesis-sim.org/GENESIS/Hyperdoc/Manual-25.html
# Besides specifying the -nox option when starting genesis to avoid starting
# XODUS, you also need to use the -notty and -batch options. GENESIS will
# attempt to read from stdin after the .simrc and command line script are
# completed.  The -batch option causes genesis to exit rather than try to read
# stdin.  -notty will avoid doing any terminal setup and cleanup procedures
# which can also cause this type of behaviour.  You must specify both on the
# command line (i.e. neither option implies the other).

# ayu: Use /data2/software/genesis-2.3/pgenesis/bin/pgenesis.distributed to run
# on non-local or multiple hosts. The hosts are hardcoded into that script (so
# modify it if you need to use a different selection of hosts).

# Non-interactive (output redirected to log file)
# Edit pgenesis.distributed to use selected hosts
sed -i "s/--host %HOSTS%/--host $myhosts/; s/--host [a-z,]*/--host $myhosts/" ./pgenesis.distributed
./pgenesis.distributed -nox -notty -batch $mydir/Neocortex.g > >(tee -a "$logfile") 2> >(tee -a "$logfile.errors" >&2)
#/data2/software/genesis-2.4/pgenesis/bin/pgenesis -nox -notty -batch $mydir/Neocortex.g | tee -a "$logfile" 2>&1

# Interactive (no redirection)
#/data2/software/genesis-2.4/pgenesis/bin/pgenesis -nox $mydir/Neocortex

# Retrieve datafiles from localhost and hosts
if [[ "$remotedata" ]]; then
    /data2/data/Neocortex_sim/Scripts/retrieve_data.sh "$mydirwithtime"
fi

# no longer necessary
# Move tree to data file
#mv "$mydir/data/connections/"* "$mydirwithtime/connections/" 2>/dev/null

